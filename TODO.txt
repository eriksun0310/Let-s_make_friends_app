列下時間：2024/12/08
接下來要做的清單
➖➖➖➖➖➖➖➖➖
➖✏️ 以後要做的 
➖🧭 邏輯        
➖🐛 BUG          
➖✅ 已完成  
➖❌ 未完成
➖🚀 要先做  
➖⌛ 之後做
➖⛔ 待測試(已寫)
➖🈲 目前可能用不到,最後可以刪掉 
➖🧘‍♂️正在做
➖😵‍💫 以後再來想要不要弄
➖❓ 問題

➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖


 [寫 取supabase 、或更新等等的函式統一規格]
 1. try catch
 2. 有回傳資料 {success: boolean, errorMessage?:string, data: }
 3. 無回傳資料 type Result  

➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
🚀[整理code]
☑️ 整理好的
✅ 測試完成的
🈲 以後可能用不到的

1. 個人資料
    ☑️1. handleUserEvent
    ☑️2.刪除user_online_status 相關的邏輯、資料表
    ✅3. 大頭貼component
    😵‍💫4.好友的UI 要調整

2. 加好友
    ☑️1.handleFriendsEvent
3. 首頁
    ☑️1.handlePostEvent
4. 聊天室
    ☑️1.handleChatEvent
➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖


✅[加好友 整理code]
✅1. 將 useAddFriendListeners 統整進 useFriendRequests
✅2. friends 資料表 的  notified -> is_read rename
✅3. 整理 新好友的通知 改記在 redux


❓[問題]
1. 關於有時候畫面剛載入完 , 會去getFriendList (取資料庫的資料), 然後更新回friendList 的redux ,不過要在哪個時間點,
再去重新fetch 一次資料庫, 假設每次都要更新 friend redux, 什麼時候 friendList redux 資料會遺失?

在什么情况下重新从数据库获取数据？
你可以根据以下情景来决定何时重新获取数据：

应用启动：当用户第一次打开应用时，从数据库加载初始数据。
应用切回前台：当用户从后台切回前台时，可能需要重新获取数据以保证数据的实时性。
特定事件触发：当用户执行某些操作（如刷新页面、特定交互）时，可以手动触发数据刷新。


狀態	持久化（Redux Persist）	即時更新	實現方式
個人資料	✅ 是	❌ 否	儲存在 Redux Persist 或本地存儲
好友資料	✅ 是	❌ 否	啟動時從伺服器加載，持久化即可
好友邀請	❌ 否	✅ 是	切回前台或有事件通知時拉取更新
聊天室	❌ 否	✅ 是	使用 WebSocket 或 AppState 更新
貼文	❌ 否	✅ 是	每次進入頁面或下拉刷新時拉取更新





➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
[文章 BUG]
1.  換了大頭貼 文章的大頭貼沒有變更 , 應該要監聽大頭貼、個人資料那些

➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
🚀[要先做]
✅1.編輯貼文 有問題 
目前看來自己編輯貼文 內容跟tags 會取正確的
如果是對方剛好在當下的文, 有時候的tags 會是上一次的舊tags,  不過內容會是新的
➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
🚀[posts]
✅1. 編輯貼文的邏輯
✅2. 刪除貼文的邏輯(用supabase ON DELETE CASCADE )

➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
🚀[個人資料]
✅1. 文章權限設定, 點了之後要過濾不屬於該文章的權限
✅2. 再點選文章進去要看到是朋友還是公開
✅3. 公開文章 訪客 可以看到按讚留言、朋友文章訪客看不到文章、按讚留言



➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
🧘‍♂️[設定]
✅1. 設定畫面UI
✅2. 開一張表, settings, 存到資料庫
✅3. 串接user_settings 的 function
✅4. 可以將user_settings 的狀態存到redux 就不用每次都需要查詢db
5. 實作設定的相關邏輯, 聊天室、✅貼文按讚、✅貼文留言
✅6. getAllPosts 要取得個別的使用者設定
✅7. 在關於我的時候, 給上initUserSettings 預設值





➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
🧘‍♂️[post_likes]
✅1. 處理按讚、收回讚 可以更新到post_likes db 
✅2. 已說讚的人的UI , 類似tag drawer 的顯示方式
✅3.串接 usePostLikesListeners 收到insert  取得完整的好友資訊 更新redux addPostLike 
✅4. 實作已說讚的人, render 用戶出來
5.點了已說讚的用戶,可以導向用戶個人資訊, 除了自己以外不可點
6.如果是訪客的話,旁邊可以出現加好友
🧘‍♂️7. postLikes: 加userState
➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
[post_likes BUG]
1. 在home 收回讚不會同步到 文章詳細 元件

➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
[post_likes UI]
1. LikeDrawer 根據 用戶狀態顯示
    1. friend: 刪除好友的icon
    2. visitor: 加好友的icon
2. 點了 用戶頭貼, 也要顯示 刪除好友的icon 、加好友的icon
3.search bar 搜尋好友

➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖

[userInfo]
1. 加好友 AddFriend.tsx -> userInfoFriend ->  拒絕、加好友
2. 好友邀請 FriendInvitation.tsx -> userInfoFriend -> 拒絕、確認
3. 好友列表(已經是好友) FriendItem.tsx 、likeDrawer.tsx 進去 -> userInfoFriend ->  刪除好友、 聊天室

[FriendCard]
✅1. 點了card 就等於是search
✅2. 左:拒絕、右:(確認、加)


[加好友]
1. 444 點了 888 刪除好友, 要同步888 的加好友 的頁面

➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖

⌛[之後做]

[post_likes]
1. 處理按讚、收回讚 可以更新到post_likes db 

[post_comments]
1. 處理留言 可以更新到post_comments db 

[tags]
3. 搜尋tag 找到對應的貼文 的UI
4. 搜尋tag 找到對應的貼文 的邏輯


1. 把 firebase.json 刪掉 (等所有的資料表串接好)
2. 貼文按讚、留言 提醒 的UI (預計放在首頁的左上角 )

[user_online_status]
1. 之後可以評估還需不需要



➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
✏️[聊天室]
✅1. 測試有新用戶的話,傳第一則訊息, 會不會即時顯示在訊息列表中
✅2. 顯示bottom icon 有提示數字(加好友、聊天室)
✅3. 紀錄用戶是否在線上 user_online_status
✅4. 串接 傳送新訊息的邏輯, 如果不在線上 則要更新chat_rooms 的對方未讀數量 
✅5. 刪除聊天室, 並刪除聊天紀錄
✅6. 雙方都刪除聊天室的話, 把messages 全都清除
❌7. 推播 Push notifications(ex:像line 跳出通知)
android 設定好了 要用實機
ios 要開發者帳號才可以測試

➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
🧭[刪除聊天室邏輯]
user1_id:A 、user2_id:B
✅1. 資料庫: A 還有6則未讀訊息, A 刪除 B 聊天室, 資料庫更新  chat_rooms =>  user1_deleted:true、unread_count_user1:0, 但是不更新messages 的6則未讀訊息, 如果B再傳訊息給A, A點進已讀
✅2. 聊天列表取資料要排除 user1_deleted:true、user2_deleted:true
✅3. 測試 user1_deleted:true + user2_deleted:true , messages 的訊息有沒有刪掉
✅4.測試 B 傳訊息 A 的聊天列表 再長出來 
✅5. 在 chat_rooms 增加 user1_deleted_at、 user2_deleted_at 紀錄刪除聊天室的時間
✅6. UI呈現: 未讀之後刪除聊天室的話, 再傳訊息以前未讀的都已讀
✅7. 刪除聊天室後, 僅顯示刪除聊天室時間後的訊息




➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
🐛[聊天列表]
✅1. 有最新的訊息應該要排在最上面
✅2.用好友列表傳訊息, 再回到聊天室, 聊天列表沒有顯示最後一筆訊息以及時間 (可能redux 沒更新)
✅3.創建新的聊天室 聊天室不會在最上面
✅4.再次傳訊息 的聊天室 聊天列表 不會在最上面
➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
🐛[Bottom Tab  BUG]
❌1. 點到那個tab 才會亮紅燈提醒(加好友)


➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖

✏️[加好友]
✅1.顯示bottom icon 有提示數字/亮燈
➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖

🐛[聊天室 BUG]
✅1.當沒有已讀過的話,已讀數量會是正確的, 但是當點進聊天室的話, 就不會在更新已讀的數量
✅2. 當使用者沒有登入時, 傳訊息給使用者不會記錄db 的未讀
✅目前有寫一個provider, 不過 要重新測試了 在聊天列表的未讀訊息、聊天室內的即時更新、已讀狀態
✅3.當新聊天室 傳送第一則訊息 , 聊天室會先loading, 然後第一則訊息會不見

➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
🐛[好友列表 BUG]
❌1. 點了好友資訊, 再點聊天室, 返回好友資訊, 返回好友列表 , 左上的返回鍵會消失

➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
🐛[登入 BUG]
2024/12/14 
✅1.不確定是不是常態, 當我註冊新用戶的時候, 用ios 按下登入expo 會報錯 跳出整個應用程式,但是當是舊用戶 就不會有這個問題 (如果新用戶填個人資料的清況下登入)
用android 的話就不會有這個問題


➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
💡想到要做的功能💡(要做)

[好友列表]
✅1. search bar (搜尋好友) 邏輯
✅2. UI 


[聊天室]
✅1. search bar (搜尋好友) 邏輯
✅2. UI 



➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
✏️[發文 大致操作資料的流程]
1. handlePostEvent: 
    [post_tags]:
        ✅1. getTags: 取得 所有的tag  (資料表:post_tags)
        ✅2. addPostTag:  取得 新增tag  (資料表:post_tags)
        ✅3.getPostTagsByPostId: 取得文章內的tag
    [posts]:
        ✅1. getAllPosts: 取得所有文章(好友 + 自己 + 非好友但設為公開)的文章 (資料表: posts、post_tags 、post_comments、post_likes、friends、users)
        ✅2. getPostDetail: 取得文章詳細資訊
        ✅3.. addPost: 新增文章, (資料表: posts、post_tags)
        ✅3. editPost: 編輯文章
        ✅4. deletePost: 刪除文章
    [post_comments]:
        🈲1. getPostComments: 取得文章留言
        2. addPostComment: 新增文章留言
        3. editPostComment: 編輯文章留言
        4. deletePostComment: 刪除文章留言
        ⛔5. getPostCommentsByPostId: 取得所有文章的留言
    [post_likes]:
        🈲1. getPostLikes: 取得文章按讚數
        2. updatePostLikes: 更新文章按讚數 (按讚、收回)
        ⛔3. getPostLikesByPostId:  取得所有文章的按讚


2.  寫 [Policies]
    ✅[post_tags]:
        ⛔1.select
        ✅2.insert
          3.delete
    [posts]:
        ✅1.select
        ✅2.insert
        ✅3.delete
        ⛔4.update

    [post_comments]:
        1.select
        2.insert
        3.delete
        4.update

    [post_likes]:
        1.select
        2.insert: 按讚
        3.delete: 收回讚

  3. post 監聽器      
➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖



🧭[貼文邏輯]
公開的貼文: 不管是好友還是非好友都會顯示
朋友的貼文: 只有朋友可以看到


➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖



✏️[新增貼文]
1. 換成自己的頭貼、名字
2. tag 取的資料是從   redux 來render
3. 新增 postSlice redux:
    1. getTags: 
    2. addTag: 取得 新增tag
    3. addPost:

4. 資料庫串接
    getTags()、addTag()、addPost()、


➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖




✏️[編輯貼文]

✏️[刪除貼文]

✏️[搜尋貼文]




✏️[貼文按讚]


✏️[貼文留言]



➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖➖
⌛擴充/暫緩 功能⌛(可做可不做, 視未來的需求)

[聊天室]
1.當對方刪除聊天室, 未讀的部分還是保留未讀, 從已讀的部分 會備註 ----以下為查看訊息----, 再次進去聊天室未讀會變已讀


[個人資料]
1. 設定 是否要讓對方看到已讀


